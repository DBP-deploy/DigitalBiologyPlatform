openapi: 3.0.3
info:
  title: Digital Biology Platform API - OpenAPI 3.0
  description: |-
    See github documentation at https://github.com/GaudiLabs/DigitalBiologyPlatform
  termsOfService: https://github.com/GaudiLabs/DigitalBiologyPlatform
  contact:
    email: apiteam@swagger.io
  version: 1.0.11
#commented because causing deployment problems
#TODO : investigate
#servers:
#  - url: https://nohostnamefornow.io
#  - url: http://localhost:8080
#  - url: https://dbp-backend-api-production.up.railway.app
tags:
  - name: user
    description: Operations about users
  - name: protocol
    description: Operations about protocols
paths:
  /swagger.json:
    get:
      tags:
        - swagger
      summary: Serve a json file representing this swaggerfile
      description: ''
      operationId: serveSwaggerFile
      responses:
        '200':
          description: successful operation
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create a user
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserParams'
      responses:
        default:
          description: successful operation
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Request access token via username/password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParams'
      responses:
        '201':
          description: successful operation, token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /user/me:
    get:
      security:
        - BearerAuth: []
      tags:
        - user
      summary: Get user infos of token bearer
      description: ''
      operationId: getSelfUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '404':
          description: User not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequestError'
  /user/{username}:
    get:
      security:
        - BearerAuth: []
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /protocol/me:
    get:
      tags:
        - protocol
      summary: Get token bearer protocols list
      description: return a list of protocols created by this user
      operationId: getSelfProtocolList
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProtocolsList'
 
components:
  responses:
    UnauthorizedError:
      description: Authentication information is present but wrong
    BadRequestError:
      description: Request body is baddly formated, authentication information is missing or invalid


  schemas:

    Electrode:
      type: object
      required: 
        - "value"
        - "electrode_id"
      properties: 
        value: 
          type: "number"
        electrode_id: 
          type: "string"

    Frame:
      type: object
      required: 
        - "duration"
        - "rank"
        - "electrodes"
      properties: 
        duration: 
          type: "number"
        rank: 
          type: "number"
        electrodes: 
          type: "array"
          items:
             $ref: '#/components/schemas/Electrode'

    RankedAuthor:
      type: object
      required: 
        - "rank"
        - "author"
      properties: 
        rank: 
          type: "number"
        author: 
          type: "string"

    ShortProtocol:
      type: object
      required: 
        - "id"
        - "name"
        - "mask_frame"
        - "author_list"
        - "author_rank"
        - "frame_count"
        - "total_duration"
      properties: 
        id: 
          type: "number"
        name: 
          type: "string"
        mask_frame: 
          type: "array"
          items: 
            $ref : '#/components/schemas/Frame'
        author_list: 
          type: "array"
          items: 
            $ref: '#/components/schemas/RankedAuthor'
        author_rank: 
          type: "number"
        frame_count: 
          type: "number"
        total_duration: 
          type: "number"

 
    UserProtocolsList:
      type: object
      required: 
        - "protocols"
      properties:
        protocols:
          type: array
          items:
            $ref: '#/components/schemas/ShortProtocol'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/LoginToken'
      xml:
        name: user
    LoginToken:
      type: object
      properties:
        token:
          type: string
          example: "Xz5Re76tlCTYddIVwUOpBI"
        expiration_date:
          type: string
          example: "2012-04-23T18:25:43.511Z"
      xml:
        name: user
    LoginParams:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: "Userpass"
      xml:
        name: user
    CreateUserParams:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: "Userpass"
        email:
          type: string
          example: "a.b@c.d"
      xml:
        name: user
 
 
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

