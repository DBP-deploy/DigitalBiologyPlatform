openapi: 3.0.3
info:
  title: Digital Biology Platform API - OpenAPI 3.0
  description: |-
    See github documentation at https://github.com/GaudiLabs/DigitalBiologyPlatform
  termsOfService: https://github.com/GaudiLabs/DigitalBiologyPlatform
  contact:
    email: apiteam@swagger.io
  version: 1.0.11
servers:
  - url: https://nohostnamefornow.io
  - url: http://localhost:8080
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create a user
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /swagger.json:
    get:
      tags:
        - swagger
      summary: Serve a json file representing this swaggerfile
      description: ''
      operationId: serveSwaggerFile
      responses:
        '200':
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Request access token via username/password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParams'
      responses:
        '201':
          description: successful operation, token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      security:
        - BearerAuth: []
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  responses:
    ForbiddenError:
      description: Authentication information is missing or invalid
    UnauthorizedError:
      description: Authentication information is missing or invalid

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    LoginToken:
      type: object
      properties:
        username:
          type: string
          example: theUser
        token:
          type: string
          example: "Xz5Re76tlCTYddIVwUOpBI"
        expiration_date:
          type: string
          example: "2012-04-23T18:25:43.511Z"
      xml:
        name: user
    LoginParams:
      type: object
      properties:
        username:
          type: string
          example: theUser
        password:
          type: string
          example: "Userpass"
      xml:
        name: user
 
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

