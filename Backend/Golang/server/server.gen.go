// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserParams defines model for CreateUserParams.
type CreateUserParams struct {
	CaptchaToken string `json:"captcha_token"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Username     string `json:"username"`
}

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration   float32     `json:"duration"`
	Electrodes []Electrode `json:"electrodes"`
	Rank       float32     `json:"rank"`
}

// FullProtocol defines model for FullProtocol.
type FullProtocol struct {
	AuthorList    *[]RankedAuthor `json:"author_list,omitempty"`
	Description   *string         `json:"description,omitempty"`
	DeviceId      float32         `json:"device_id"`
	FrameCount    float32         `json:"frame_count"`
	Frames        []Frame         `json:"frames"`
	Id            float32         `json:"id"`
	Name          string          `json:"name"`
	TotalDuration float32         `json:"total_duration"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	Description   string         `json:"description"`
	DeviceId      float32        `json:"device_id"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	TotalDuration float32        `json:"total_duration"`
}

// UploadProtocolParams defines model for UploadProtocolParams.
type UploadProtocolParams struct {
	AuthorList  []RankedAuthor `json:"author_list"`
	Description *string        `json:"description,omitempty"`
	DeviceId    float32        `json:"device_id"`
	Frames      []Frame        `json:"frames"`
	Name        string         `json:"name"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UserProtocolsList defines model for UserProtocolsList.
type UserProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// UploadProtocolJSONBody defines parameters for UploadProtocol.
type UploadProtocolJSONBody = UploadProtocolParams

// OverwriteProtocolJSONBody defines parameters for OverwriteProtocol.
type OverwriteProtocolJSONBody = UploadProtocolParams

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserParams

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UploadProtocolJSONRequestBody defines body for UploadProtocol for application/json ContentType.
type UploadProtocolJSONRequestBody = UploadProtocolJSONBody

// OverwriteProtocolJSONRequestBody defines body for OverwriteProtocol for application/json ContentType.
type OverwriteProtocolJSONRequestBody = OverwriteProtocolJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a protocol
	// (POST /protocol)
	UploadProtocol(ctx echo.Context) error
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// delete a particular entire protocol by its ID
	// (DELETE /protocol/{protocolID})
	DeleteProtocol(ctx echo.Context, protocolID int) error
	// Get a particular protocol by its ID
	// (GET /protocol/{protocolID})
	GetProtocol(ctx echo.Context, protocolID int) error
	// update a particular entire protocol by its ID
	// (PUT /protocol/{protocolID})
	OverwriteProtocol(ctx echo.Context, protocolID int) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UploadProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProtocol(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProtocol(ctx)
	return err
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// DeleteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProtocol(ctx, protocolID)
	return err
}

// GetProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtocol(ctx, protocolID)
	return err
}

// OverwriteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) OverwriteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverwriteProtocol(ctx, protocolID)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/protocol", wrapper.UploadProtocol)
	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.DELETE(baseURL+"/protocol/:protocolID", wrapper.DeleteProtocol)
	router.GET(baseURL+"/protocol/:protocolID", wrapper.GetProtocol)
	router.PUT(baseURL+"/protocol/:protocolID", wrapper.OverwriteProtocol)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZW2/buBL+KwTPeVR9SdKeAz+1adogQLAJmmaxu0UQ0NLYZiORKjlM6hb+7wtedLPo",
	"2N3GQR/2LRY1w5nvm/k4VL7TVBalFCBQ08l3qkCXUmhwP45Z9gG+GND4Timp7KMMdKp4iVwKOqFhlUxl",
	"tiRckynLsnxJZlIVDCFLCDO4AIE8ZdaCcOGX3N+aFFxrLuZEKsLFPct5RlcJvRbWSir+DbIN+7551G2p",
	"QINAMjVIHpQUc7paJVSnCyiYy+utAoZwrUFdMsUK96xUsgSF3GeeshLTBbtFeQfCPsBlCXRCNSpu/SUU",
	"CsZzuwJfWVHmdpENpq/TQUaT/tsl0/pBqqxrYCOwKzELo0EJVkDXAhcu7L7BKqEKvhiuIKOTT411a+sq",
	"5mQtu5vamZx+hhRpQr8WLjW/v3PmdniXQ4pKZtAHDKqlW55F8bpnuYHWijDFNLhtB+5fS7r+ehGuEvpe",
	"BXC6cWRGMV8kvZ1aTt2rHMFT/18FMzqh/xk2rTAM1TJsUl7VQTCl2NL+VkzcbU+pDikYdOKIpmby/FJJ",
	"lKnM+xn65rjNucads/jAxB1kb5xlLJFOd0XIy+Cep2vUNrDOLBW3qTQCN6/vDrlnNhLlhu2rLulFjRJZ",
	"fvtIRawRxW2PhK4JMScBbk27afactzGKcXou51xsUptfQR12VwGXysdKGNdk4GvJPSK3GcO18A5G44MX",
	"o6MXB4cfx/+fHLycHB0OXo7Hf8USrIW3Mf/j28sP8L9XmL/9+GeWnf3+cH1RHp9Fk90xk05bbGi0aGXt",
	"1vih24OfWFVcLaTC52314HNDBvuWgg1mBdN3t7NK0X9OJfYiB60Akw4tXUB3EIkG3W2ScV3mkmVVdWzS",
	"jl/0ONB7I3KNpbheV+RsQdgKQV/D+pPdZ7kQr93zQSqLmF7xrniPRwn1MymdUC7w1VFjxAXC3EPlVG53",
	"qFrKG8Hrx8+EHWXSDcqhDPV5KLS1E6xa3jmXrvT10lljufHf59HO9pAaxXF5ZZ2HuwswBcrWuP3ldrVG",
	"U/e4QWOBWNKV9WEvEW70lwJZiq1KoKzkCKx4rR/YfA5qwGWvS+gVAJlzXJgpyWRqChDoLyQMid1ET4ZD",
	"v25LaHjKTMbP2VQPT/icI8uPuczlfHmZM7SFYyMEVeiL2RUoW8Mh1n/ghqMrhJPjS5rQe1DaBzwejAbj",
	"sU1EliBYyemEHg5Gg0M3FeDCoTgs24eT9NR3E/cyRRipXiUoCS6AaFD3DmpbKA6Ls6x+v2be8wwaj2W2",
	"rPAHf3ywsszDHW/4WXsx8vWzrbqi2ulo7gZfvUFajwkXxO3WLkFUBlxNtq7HGcyYySOQaJOmoPXM5KTO",
	"vVOndPKpW6GfblY3CdWmKJhaxkC1RLK5bvcCvbEua4aGvvPnEAlIARolCCNWFomc1W41Sd1dOCPTJcEF",
	"18ToCGengFeQzyq0zr24bgLjaRjsiU6Evp8H+hSQOBUmXhlayIQjZBvs36u/zk5WHogc/OTbjdU/71La",
	"RfnEvdHqjNLWLSAo7fLo+vvNFKB4Ss5OLKG24doNGKKwskYnrp+rYWZCm4B7JZ602Fk/rixwz1X/DVhM",
	"IU9NzhQBgVy1spwuCUdNXBYRkpItrbCRhlPAp+HA7v9cBDxJz3U+POyt3Tqk7s5maSJsyntQD4o/3lcX",
	"1UtPQ2u95x7I/fckXK8YU2bsJ5XAynU1ulXgBW3oFoodteDKv/me57B+xh2MRj+SYp2D80uYw5LMeA5E",
	"QfhIzcXcn7shwJnftsoiPA1JmOq+Eh3E/FdtwuJHePPNe08jV++jeqTI3oZhw0ZI6mvHk9dWDXyAJABS",
	"gep+NogOc3utauPaRc7duvYIXPvTYASz6n8szGUbhpV77mm2mjNsfeF/HMqD0fhpow530d1OiiTEHiZO",
	"e/M48g0V26cOfLj+XyhnN95u1/8/Urc4zuXcj7uEi+rKstQIxSOl0pmxozNyXSh93XiyuXj3s/n5IbaW",
	"R5FbosVZSCQzaUT240ND4GkmtTuSWxN7hK1V/Wg9jIsKGk3YVBrvVzeHt//mkWw1a75H9M79XcwrWa+N",
	"qwerm9XfAQAA///R0d+Mkh0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
