// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration   float32     `json:"duration"`
	Electrodes []Electrode `json:"electrodes"`
	Rank       float32     `json:"rank"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	TotalDuration float32        `json:"total_duration"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UserProtocolsList defines model for UserProtocolsList.
type UserProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = User

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = User

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(ctx echo.Context, username string) error
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(ctx echo.Context, username string) error
	// Update user
	// (PUT /user/{username})
	UpdateUser(ctx echo.Context, username string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, username)
	return err
}

// GetUserByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserByName(ctx, username)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, username)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)
	router.DELETE(baseURL+"/user/:username", wrapper.DeleteUser)
	router.GET(baseURL+"/user/:username", wrapper.GetUserByName)
	router.PUT(baseURL+"/user/:username", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
