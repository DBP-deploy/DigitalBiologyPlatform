// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserParams defines model for CreateUserParams.
type CreateUserParams struct {
	CaptchaToken string `json:"captcha_token"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Username     string `json:"username"`
}

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration   float32     `json:"duration"`
	Electrodes []Electrode `json:"electrodes"`
	Rank       float32     `json:"rank"`
}

// FullProtocol defines model for FullProtocol.
type FullProtocol struct {
	AuthorList    *[]RankedAuthor `json:"author_list,omitempty"`
	Description   *string         `json:"description,omitempty"`
	DeviceId      float32         `json:"device_id"`
	FrameCount    float32         `json:"frame_count"`
	Frames        []Frame         `json:"frames"`
	Id            float32         `json:"id"`
	Name          string          `json:"name"`
	TotalDuration float32         `json:"total_duration"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	CaptchaToken string `json:"captcha_token"`
	Password     string `json:"password"`
	Username     string `json:"username"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	Description   string         `json:"description"`
	DeviceId      float32        `json:"device_id"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	TotalDuration float32        `json:"total_duration"`
}

// UploadProtocolParams defines model for UploadProtocolParams.
type UploadProtocolParams struct {
	AuthorList  []RankedAuthor `json:"author_list"`
	Description *string        `json:"description,omitempty"`
	DeviceId    float32        `json:"device_id"`
	Frames      []Frame        `json:"frames"`
	Name        string         `json:"name"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UserProtocolsList defines model for UserProtocolsList.
type UserProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// UploadProtocolJSONBody defines parameters for UploadProtocol.
type UploadProtocolJSONBody = UploadProtocolParams

// OverwriteProtocolJSONBody defines parameters for OverwriteProtocol.
type OverwriteProtocolJSONBody = UploadProtocolParams

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserParams

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UploadProtocolJSONRequestBody defines body for UploadProtocol for application/json ContentType.
type UploadProtocolJSONRequestBody = UploadProtocolJSONBody

// OverwriteProtocolJSONRequestBody defines body for OverwriteProtocol for application/json ContentType.
type OverwriteProtocolJSONRequestBody = OverwriteProtocolJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a protocol
	// (POST /protocol/add)
	UploadProtocol(ctx echo.Context) error
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// Get a particular protocol by its ID
	// (GET /protocol/{protocolID})
	GetProtocol(ctx echo.Context, protocolID int) error
	// update a particular entire protocol by its ID
	// (PUT /protocol/{protocolID})
	OverwriteProtocol(ctx echo.Context, protocolID int) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UploadProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProtocol(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProtocol(ctx)
	return err
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// GetProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtocol(ctx, protocolID)
	return err
}

// OverwriteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) OverwriteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverwriteProtocol(ctx, protocolID)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/protocol/add", wrapper.UploadProtocol)
	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.GET(baseURL+"/protocol/:protocolID", wrapper.GetProtocol)
	router.PUT(baseURL+"/protocol/:protocolID", wrapper.OverwriteProtocol)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
