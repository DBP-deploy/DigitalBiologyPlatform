// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserParams defines model for CreateUserParams.
type CreateUserParams struct {
	CaptchaToken string `json:"captcha_token"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Username     string `json:"username"`
}

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration     float32               `json:"duration"`
	Electrodes   []Electrode           `json:"electrodes"`
	Magnets      *[]IndexedMagnet      `json:"magnets,omitempty"`
	Rank         float32               `json:"rank"`
	Temperatures *[]IndexedTemperature `json:"temperatures,omitempty"`
}

// FullProtocol defines model for FullProtocol.
type FullProtocol struct {
	AuthorList    *[]RankedAuthor `json:"author_list,omitempty"`
	Description   *string         `json:"description,omitempty"`
	DeviceId      float32         `json:"device_id"`
	FrameCount    float32         `json:"frame_count"`
	Frames        []Frame         `json:"frames"`
	Id            float32         `json:"id"`
	Name          string          `json:"name"`
	Public        bool            `json:"public"`
	TotalDuration float32         `json:"total_duration"`
}

// IndexedMagnet defines model for IndexedMagnet.
type IndexedMagnet struct {
	Index float32 `json:"index"`
	Value bool    `json:"value"`
}

// IndexedTemperature defines model for IndexedTemperature.
type IndexedTemperature struct {
	Index float32 `json:"index"`
	Value float32 `json:"value"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	Description   string         `json:"description"`
	DeviceId      float32        `json:"device_id"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	TotalDuration float32        `json:"total_duration"`
}

// ShortProtocolsList defines model for ShortProtocolsList.
type ShortProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// UploadProtocolParams defines model for UploadProtocolParams.
type UploadProtocolParams struct {
	AuthorList  []RankedAuthor `json:"author_list"`
	Description *string        `json:"description,omitempty"`
	DeviceId    float32        `json:"device_id"`
	Frames      []Frame        `json:"frames"`
	Name        string         `json:"name"`
	Public      bool           `json:"public"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UploadProtocolJSONBody defines parameters for UploadProtocol.
type UploadProtocolJSONBody = UploadProtocolParams

// OverwriteProtocolJSONBody defines parameters for OverwriteProtocol.
type OverwriteProtocolJSONBody = UploadProtocolParams

// GetPublicProtocolsListParams defines parameters for GetPublicProtocolsList.
type GetPublicProtocolsListParams struct {
	// The number of items to skip before starting to collect the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserParams

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UploadProtocolJSONRequestBody defines body for UploadProtocol for application/json ContentType.
type UploadProtocolJSONRequestBody = UploadProtocolJSONBody

// OverwriteProtocolJSONRequestBody defines body for OverwriteProtocol for application/json ContentType.
type OverwriteProtocolJSONRequestBody = OverwriteProtocolJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a protocol
	// (POST /protocol)
	UploadProtocol(ctx echo.Context) error
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// delete a particular entire protocol by its ID
	// (DELETE /protocol/{protocolID})
	DeleteProtocol(ctx echo.Context, protocolID int) error
	// Get a particular protocol by its ID
	// (GET /protocol/{protocolID})
	GetProtocol(ctx echo.Context, protocolID int) error
	// update a particular entire protocol by its ID
	// (PUT /protocol/{protocolID})
	OverwriteProtocol(ctx echo.Context, protocolID int) error
	// Get public protocols list
	// (GET /public/protocol/all)
	GetPublicProtocolsList(ctx echo.Context, params GetPublicProtocolsListParams) error
	// Get a particular protocol by its ID
	// (GET /public/protocol/{protocolID})
	GetPublicProtocol(ctx echo.Context, protocolID int) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UploadProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProtocol(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProtocol(ctx)
	return err
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// DeleteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProtocol(ctx, protocolID)
	return err
}

// GetProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtocol(ctx, protocolID)
	return err
}

// OverwriteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) OverwriteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverwriteProtocol(ctx, protocolID)
	return err
}

// GetPublicProtocolsList converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicProtocolsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPublicProtocolsListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPublicProtocolsList(ctx, params)
	return err
}

// GetPublicProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPublicProtocol(ctx, protocolID)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/protocol", wrapper.UploadProtocol)
	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.DELETE(baseURL+"/protocol/:protocolID", wrapper.DeleteProtocol)
	router.GET(baseURL+"/protocol/:protocolID", wrapper.GetProtocol)
	router.PUT(baseURL+"/protocol/:protocolID", wrapper.OverwriteProtocol)
	router.GET(baseURL+"/public/protocol/all", wrapper.GetPublicProtocolsList)
	router.GET(baseURL+"/public/protocol/:protocolID", wrapper.GetPublicProtocol)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
