// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration   float32     `json:"duration"`
	Electrodes []Electrode `json:"electrodes"`
	Rank       float32     `json:"rank"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	TotalDuration float32        `json:"total_duration"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UserProtocolsList defines model for UserProtocolsList.
type UserProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = User

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody = User

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(ctx echo.Context, username string) error
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(ctx echo.Context, username string) error
	// Update user
	// (PUT /user/{username})
	UpdateUser(ctx echo.Context, username string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, username)
	return err
}

// GetUserByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserByName(ctx, username)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, username)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)
	router.DELETE(baseURL+"/user/:username", wrapper.DeleteUser)
	router.GET(baseURL+"/user/:username", wrapper.GetUserByName)
	router.PUT(baseURL+"/user/:username", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RY3W7buBJ+FYLnXCqWnaQ9ha/a9A8BgpOgSRa7WwQBLY5sNhKpkqM4buF3XwxJ2Zal",
	"JG6b9GavbImc4fx838xQ33lmyspo0Oj4+Du34CqjHfiHIyE/wdcaHL631lh6JcFlVlWojOZjHlfZxMgF",
	"U45NhJTFguXGlgJBJkzUOAONKhMkwZQOS/6/Y6VyTukpM5YpfSsKJfky4ZeapIxV30Dec+6bB9VWFhxo",
	"ZJMa2dwaPeXLZcJdNoNSeL/eF5ChNRLoobKmAosquAzN0rWS9IyLCviYO7SK9CT8VhQ1bKzoupyA9SdY",
	"+ForC5KPP8dtSVvfVdJImckXyJD0fbCi7LFD1lYEZzsnbSj1WxVC6f/810LOx/w/6TqlafQ6Xbu8XBkh",
	"rBULerZC3zzu0sqkKNCyo8+1EzNV+kxYEcxrO1gJ5+bG+iDDnSirgoQvHVha4Uk38rUDq2Ow1hI4AxLq",
	"Ciy3LUr4XVmQcFDi9flt3s4LcwO6Bw93lQpuX0uBW2fvD0f7e8PDvf2Di9Gr8f6L8eHB4MVo9Hef9djo",
	"X4v/+e3FJ/jfSyzeXvwl5fEf88vT6uj4Vzz5JPQNyDeePl1fxOp9x7rdEBDTHvX0pfx8ZiyeWYMmM8V9",
	"FlwXyuHOyG351APeqPMeDxKeE8GuM1Nr7F1v8Xz9uhTu5jpvyLmTpYHKPSY2qO0BBYri+gGubyVASR61",
	"tQxMWoFth6QdgM6RfUn0fOoyoRSqaAP4i5np1/79IDNlH+pVm9+jYcJDqeZjrjS+PFwLKY0wDbH3XNm9",
	"tm3wtyf4z1Y2SL6BujuJkN4qcs3yzr60CdRxZwsPa/3dPFLLg6y2ChfnpDy2dBAWLLGJnvypJDTxr9fR",
	"mCFWfEk6qLfS1sxoFBluIIGLSiGI8rWbi+kU7EAZMrjdqc8B2FThrJ4wabK6BI2hTwtkdIgbp2lYJwil",
	"H0Ut1YmYuPSdmioUxZEyhZkuzgqBBByyEGzpTvNzsLcqa2z9CTUKPRDiBhZ3sGYLe3N2zPbYaQWa/h0M",
	"hjzht2Bd8Gs0GA5GI/LXVKBFpfiYHwyGgwOe8ErgzAc7bfKTBvhNAbuzjAWsrWaCEXmZydkqqSyzQGMU",
	"mywYzpRjdUAsIcwH8VjyMf8IeA5F3mDmJJSA1hwnIRd1gU0aIVRCUVVFnKDSLy6UnwDDx0DaRb6HStsv",
	"V2cZOJfXBVsZHFBZl6Wwi2A681xnAX8brsdKhmLqNoHOr0hD2iCuMTsGth0YQgich50fVAHbUdkfDrvZ",
	"2MFqr5cJRoezXBXALMSRk4ZZn6loYB6ObbyIb6MTdVNmjeuBxVufeyb6kx5WYwWzYQo/MnLxpCn2fm+q",
	"uNubz+d7xI692hagMyNB/qrOUFx/SEMHa28jUShWbFW315USbQ3L30CK5/FuB0xGtESsNHjzj2uwpQU1",
	"yk3ItUHl++gzYmrzPtDjZnOZFN7bWBhuVWAANd90dWd4LLf7w9HTWh2ni91yk0TbY/mmJnEYak3fOSvD",
	"0+3rtpcbPS7XvTC3wXFipqF3MKXRMJwBcwuHUD4AlVbD6m04K6B0S+pT8mlHNvz+EJPkYbduk9lMG2S5",
	"qbVsjWF8/Lk9gH2+Wl5t98OYp9w4mgU2u+MD2freUGQZDCogXFXbpl1QZ8qEZkYXCzYBJo2GMFwAK8x0",
	"CpIp7S0YdDrOO680Jr0iEgOCdd6n7WOAkS0MZwKZBpBEZn+e10H0pTLk56TmPjNez+nb5E42ALM9rF9t",
	"AfCwr6cfh29LqzrCXE2obJi5YxJXWQqRuKfWJvdyhnQeLf4fPPzJAOaA2QzkgF26YMCI5cYyBEejx4A9",
	"Y2Sfgdq/rVUmz4mLHyb3ZBF+Y0o6AKpqfGLuXlZS7MbdNuyel7b/9qE1ZIUJzeBOOfK+Kf6hRaOx/mvS",
	"fVPrDw+J8cB7hkSPZXvb4KK2xcbdWpuZcUh5zo3VZh7u+pu7xmlamEwUtG/8avhqyCnL8ZBtY08bCx0T",
	"E1MHx10bVF7/I2Lr7x8r0dVNcXm1/CcAAP//YULt/t0YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
