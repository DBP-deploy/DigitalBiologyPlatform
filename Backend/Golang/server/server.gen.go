// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserParams defines model for CreateUserParams.
type CreateUserParams struct {
	CaptchaToken string `json:"captcha_token"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Username     string `json:"username"`
}

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration     float32               `json:"duration"`
	Electrodes   []Electrode           `json:"electrodes"`
	Magnets      *[]IndexedMagnet      `json:"magnets,omitempty"`
	Rank         float32               `json:"rank"`
	Temperatures *[]IndexedTemperature `json:"temperatures,omitempty"`
}

// FullProtocol defines model for FullProtocol.
type FullProtocol struct {
	AuthorList    *[]RankedAuthor `json:"author_list,omitempty"`
	Description   *string         `json:"description,omitempty"`
	DeviceId      float32         `json:"device_id"`
	FrameCount    float32         `json:"frame_count"`
	Frames        []Frame         `json:"frames"`
	Id            float32         `json:"id"`
	Name          string          `json:"name"`
	Public        bool            `json:"public"`
	TotalDuration float32         `json:"total_duration"`
}

// IndexedMagnet defines model for IndexedMagnet.
type IndexedMagnet struct {
	Index float32 `json:"index"`
	Value bool    `json:"value"`
}

// IndexedTemperature defines model for IndexedTemperature.
type IndexedTemperature struct {
	Index float32 `json:"index"`
	Value float32 `json:"value"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	Description   string         `json:"description"`
	DeviceId      float32        `json:"device_id"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	Public        bool           `json:"public"`
	TotalDuration float32        `json:"total_duration"`
}

// ShortProtocolsList defines model for ShortProtocolsList.
type ShortProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// UploadProtocolParams defines model for UploadProtocolParams.
type UploadProtocolParams struct {
	AuthorList  []RankedAuthor `json:"author_list"`
	Description *string        `json:"description,omitempty"`
	DeviceId    float32        `json:"device_id"`
	Frames      []Frame        `json:"frames"`
	Name        string         `json:"name"`
	Public      bool           `json:"public"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UploadProtocolJSONBody defines parameters for UploadProtocol.
type UploadProtocolJSONBody = UploadProtocolParams

// OverwriteProtocolJSONBody defines parameters for OverwriteProtocol.
type OverwriteProtocolJSONBody = UploadProtocolParams

// GetPublicProtocolsListParams defines parameters for GetPublicProtocolsList.
type GetPublicProtocolsListParams struct {
	// The number of items to skip before starting to collect the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserParams

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UploadProtocolJSONRequestBody defines body for UploadProtocol for application/json ContentType.
type UploadProtocolJSONRequestBody = UploadProtocolJSONBody

// OverwriteProtocolJSONRequestBody defines body for OverwriteProtocol for application/json ContentType.
type OverwriteProtocolJSONRequestBody = OverwriteProtocolJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a protocol
	// (POST /protocol)
	UploadProtocol(ctx echo.Context) error
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// delete a particular entire protocol by its ID
	// (DELETE /protocol/{protocolID})
	DeleteProtocol(ctx echo.Context, protocolID int) error
	// Get a particular protocol by its ID
	// (GET /protocol/{protocolID})
	GetProtocol(ctx echo.Context, protocolID int) error
	// update a particular entire protocol by its ID
	// (PUT /protocol/{protocolID})
	OverwriteProtocol(ctx echo.Context, protocolID int) error
	// Get public protocols list
	// (GET /public/protocol/all)
	GetPublicProtocolsList(ctx echo.Context, params GetPublicProtocolsListParams) error
	// Get a particular protocol by its ID
	// (GET /public/protocol/{protocolID})
	GetPublicProtocol(ctx echo.Context, protocolID int) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UploadProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProtocol(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProtocol(ctx)
	return err
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// DeleteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProtocol(ctx, protocolID)
	return err
}

// GetProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtocol(ctx, protocolID)
	return err
}

// OverwriteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) OverwriteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverwriteProtocol(ctx, protocolID)
	return err
}

// GetPublicProtocolsList converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicProtocolsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPublicProtocolsListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPublicProtocolsList(ctx, params)
	return err
}

// GetPublicProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPublicProtocol(ctx, protocolID)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/protocol", wrapper.UploadProtocol)
	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.DELETE(baseURL+"/protocol/:protocolID", wrapper.DeleteProtocol)
	router.GET(baseURL+"/protocol/:protocolID", wrapper.GetProtocol)
	router.PUT(baseURL+"/protocol/:protocolID", wrapper.OverwriteProtocol)
	router.GET(baseURL+"/public/protocol/all", wrapper.GetPublicProtocolsList)
	router.GET(baseURL+"/public/protocol/:protocolID", wrapper.GetPublicProtocol)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
