// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserParams defines model for CreateUserParams.
type CreateUserParams struct {
	Bio          *string `json:"bio,omitempty"`
	CaptchaToken string  `json:"captcha_token"`
	Email        *string `json:"email,omitempty"`
	Fullname     *string `json:"fullname,omitempty"`
	Institution  *string `json:"institution,omitempty"`
	Password     string  `json:"password"`
	Username     string  `json:"username"`
	Website      *string `json:"website,omitempty"`
}

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration     float32               `json:"duration"`
	Electrodes   []Electrode           `json:"electrodes"`
	Magnets      *[]IndexedMagnet      `json:"magnets,omitempty"`
	Rank         float32               `json:"rank"`
	Temperatures *[]IndexedTemperature `json:"temperatures,omitempty"`
}

// FullDevice defines model for FullDevice.
type FullDevice struct {
	Electrodes []string `json:"electrodes"`
	Id         float32  `json:"id"`
	Name       string   `json:"name"`
}

// FullProtocol defines model for FullProtocol.
type FullProtocol struct {
	AuthorList    *[]RankedAuthor `json:"author_list,omitempty"`
	Description   *string         `json:"description,omitempty"`
	DeviceId      float32         `json:"device_id"`
	FrameCount    float32         `json:"frame_count"`
	Frames        []Frame         `json:"frames"`
	Id            float32         `json:"id"`
	Name          string          `json:"name"`
	Public        bool            `json:"public"`
	TotalDuration float32         `json:"total_duration"`
}

// IndexedMagnet defines model for IndexedMagnet.
type IndexedMagnet struct {
	Index float32 `json:"index"`
	Value bool    `json:"value"`
}

// IndexedTemperature defines model for IndexedTemperature.
type IndexedTemperature struct {
	Index float32 `json:"index"`
	Value float32 `json:"value"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// PublicUser defines model for PublicUser.
type PublicUser struct {
	Bio                  *string `json:"bio,omitempty"`
	Email                *string `json:"email,omitempty"`
	Fullname             *string `json:"fullname,omitempty"`
	Id                   *int64  `json:"id,omitempty"`
	Institution          *string `json:"institution,omitempty"`
	ProtocolAmount       *int    `json:"protocol_amount,omitempty"`
	PublicProtocolAmount *int    `json:"public_protocol_amount,omitempty"`
	Username             *string `json:"username,omitempty"`
	Website              *string `json:"website,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	Description   string         `json:"description"`
	DeviceId      float32        `json:"device_id"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	Public        bool           `json:"public"`
	TotalDuration float32        `json:"total_duration"`
}

// ShortProtocolsList defines model for ShortProtocolsList.
type ShortProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// UploadProtocolParams defines model for UploadProtocolParams.
type UploadProtocolParams struct {
	AuthorList  []RankedAuthor `json:"author_list"`
	Description *string        `json:"description,omitempty"`
	DeviceId    float32        `json:"device_id"`
	Frames      []Frame        `json:"frames"`
	Name        string         `json:"name"`
	Public      bool           `json:"public"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UploadProtocolJSONBody defines parameters for UploadProtocol.
type UploadProtocolJSONBody = UploadProtocolParams

// OverwriteProtocolJSONBody defines parameters for OverwriteProtocol.
type OverwriteProtocolJSONBody = UploadProtocolParams

// GetPublicProtocolsListParams defines parameters for GetPublicProtocolsList.
type GetPublicProtocolsListParams struct {
	// The number of items to skip before starting to collect the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserParams

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UploadProtocolJSONRequestBody defines body for UploadProtocol for application/json ContentType.
type UploadProtocolJSONRequestBody = UploadProtocolJSONBody

// OverwriteProtocolJSONRequestBody defines body for OverwriteProtocol for application/json ContentType.
type OverwriteProtocolJSONRequestBody = OverwriteProtocolJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a particular dive infos by its ID
	// (GET /hardware/device/all)
	GetDevices(ctx echo.Context) error
	// Upload a protocol
	// (POST /protocol)
	UploadProtocol(ctx echo.Context) error
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// delete a particular entire protocol by its ID
	// (DELETE /protocol/{protocolID})
	DeleteProtocol(ctx echo.Context, protocolID int) error
	// Get a particular protocol by its ID
	// (GET /protocol/{protocolID})
	GetProtocol(ctx echo.Context, protocolID int) error
	// update a particular entire protocol by its ID
	// (PUT /protocol/{protocolID})
	OverwriteProtocol(ctx echo.Context, protocolID int) error
	// Get public protocols list
	// (GET /public/protocol/all)
	GetPublicProtocolsList(ctx echo.Context, params GetPublicProtocolsListParams) error
	// Get a particular protocol by its ID
	// (GET /public/protocol/{protocolID})
	GetPublicProtocol(ctx echo.Context, protocolID int) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
	// get a user
	// (GET /user/{username})
	GetUser(ctx echo.Context, username string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDevices converts echo context to params.
func (w *ServerInterfaceWrapper) GetDevices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDevices(ctx)
	return err
}

// UploadProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProtocol(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProtocol(ctx)
	return err
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// DeleteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProtocol(ctx, protocolID)
	return err
}

// GetProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtocol(ctx, protocolID)
	return err
}

// OverwriteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) OverwriteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverwriteProtocol(ctx, protocolID)
	return err
}

// GetPublicProtocolsList converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicProtocolsList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPublicProtocolsListParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPublicProtocolsList(ctx, params)
	return err
}

// GetPublicProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPublicProtocol(ctx, protocolID)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, ctx.Param("username"), &username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, username)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/hardware/device/all", wrapper.GetDevices)
	router.POST(baseURL+"/protocol", wrapper.UploadProtocol)
	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.DELETE(baseURL+"/protocol/:protocolID", wrapper.DeleteProtocol)
	router.GET(baseURL+"/protocol/:protocolID", wrapper.GetProtocol)
	router.PUT(baseURL+"/protocol/:protocolID", wrapper.OverwriteProtocol)
	router.GET(baseURL+"/public/protocol/all", wrapper.GetPublicProtocolsList)
	router.GET(baseURL+"/public/protocol/:protocolID", wrapper.GetPublicProtocol)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)
	router.GET(baseURL+"/user/:username", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
