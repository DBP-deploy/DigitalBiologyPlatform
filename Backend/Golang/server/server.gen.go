// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserParams defines model for CreateUserParams.
type CreateUserParams struct {
	CaptchaToken string `json:"captcha_token"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Username     string `json:"username"`
}

// Electrode defines model for Electrode.
type Electrode struct {
	ElectrodeId string  `json:"electrode_id"`
	Value       float32 `json:"value"`
}

// Frame defines model for Frame.
type Frame struct {
	Duration     float32               `json:"duration"`
	Electrodes   []Electrode           `json:"electrodes"`
	Magnets      *[]IndexedMagnet      `json:"magnets,omitempty"`
	Rank         float32               `json:"rank"`
	Temperatures *[]IndexedTemperature `json:"temperatures,omitempty"`
}

// FullProtocol defines model for FullProtocol.
type FullProtocol struct {
	AuthorList    *[]RankedAuthor `json:"author_list,omitempty"`
	Description   *string         `json:"description,omitempty"`
	DeviceId      float32         `json:"device_id"`
	FrameCount    float32         `json:"frame_count"`
	Frames        []Frame         `json:"frames"`
	Id            float32         `json:"id"`
	Name          string          `json:"name"`
	TotalDuration float32         `json:"total_duration"`
}

// IndexedMagnet defines model for IndexedMagnet.
type IndexedMagnet struct {
	Index float32 `json:"index"`
	Value bool    `json:"value"`
}

// IndexedTemperature defines model for IndexedTemperature.
type IndexedTemperature struct {
	Index float32 `json:"index"`
	Value float32 `json:"value"`
}

// LoginParams defines model for LoginParams.
type LoginParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginToken defines model for LoginToken.
type LoginToken struct {
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// RankedAuthor defines model for RankedAuthor.
type RankedAuthor struct {
	Author string  `json:"author"`
	Rank   float32 `json:"rank"`
}

// ShortProtocol defines model for ShortProtocol.
type ShortProtocol struct {
	AuthorList    []RankedAuthor `json:"author_list"`
	AuthorRank    float32        `json:"author_rank"`
	Description   string         `json:"description"`
	DeviceId      float32        `json:"device_id"`
	FrameCount    float32        `json:"frame_count"`
	Id            float32        `json:"id"`
	MaskFrame     []Frame        `json:"mask_frame"`
	Name          string         `json:"name"`
	TotalDuration float32        `json:"total_duration"`
}

// UploadProtocolParams defines model for UploadProtocolParams.
type UploadProtocolParams struct {
	AuthorList  []RankedAuthor `json:"author_list"`
	Description *string        `json:"description,omitempty"`
	DeviceId    float32        `json:"device_id"`
	Frames      []Frame        `json:"frames"`
	Name        string         `json:"name"`
}

// User defines model for User.
type User struct {
	Email    *string       `json:"email,omitempty"`
	Id       *int64        `json:"id,omitempty"`
	Tokens   *[]LoginToken `json:"tokens,omitempty"`
	Username *string       `json:"username,omitempty"`
}

// UserProtocolsList defines model for UserProtocolsList.
type UserProtocolsList struct {
	Protocols []ShortProtocol `json:"protocols"`
}

// UploadProtocolJSONBody defines parameters for UploadProtocol.
type UploadProtocolJSONBody = UploadProtocolParams

// OverwriteProtocolJSONBody defines parameters for OverwriteProtocol.
type OverwriteProtocolJSONBody = UploadProtocolParams

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody = CreateUserParams

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody = LoginParams

// UploadProtocolJSONRequestBody defines body for UploadProtocol for application/json ContentType.
type UploadProtocolJSONRequestBody = UploadProtocolJSONBody

// OverwriteProtocolJSONRequestBody defines body for OverwriteProtocol for application/json ContentType.
type OverwriteProtocolJSONRequestBody = OverwriteProtocolJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Upload a protocol
	// (POST /protocol)
	UploadProtocol(ctx echo.Context) error
	// Get token bearer protocols list
	// (GET /protocol/me)
	GetSelfProtocolList(ctx echo.Context) error
	// delete a particular entire protocol by its ID
	// (DELETE /protocol/{protocolID})
	DeleteProtocol(ctx echo.Context, protocolID int) error
	// Get a particular protocol by its ID
	// (GET /protocol/{protocolID})
	GetProtocol(ctx echo.Context, protocolID int) error
	// update a particular entire protocol by its ID
	// (PUT /protocol/{protocolID})
	OverwriteProtocol(ctx echo.Context, protocolID int) error
	// Serve a json file representing this swaggerfile
	// (GET /swagger.json)
	ServeSwaggerFile(ctx echo.Context) error
	// Create user
	// (POST /user)
	CreateUser(ctx echo.Context) error
	// Logs user into the system
	// (POST /user/login)
	LoginUser(ctx echo.Context) error
	// Get user infos of token bearer
	// (GET /user/me)
	GetSelfUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UploadProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProtocol(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProtocol(ctx)
	return err
}

// GetSelfProtocolList converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfProtocolList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfProtocolList(ctx)
	return err
}

// DeleteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteProtocol(ctx, protocolID)
	return err
}

// GetProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) GetProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProtocol(ctx, protocolID)
	return err
}

// OverwriteProtocol converts echo context to params.
func (w *ServerInterfaceWrapper) OverwriteProtocol(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "protocolID" -------------
	var protocolID int

	err = runtime.BindStyledParameterWithLocation("simple", false, "protocolID", runtime.ParamLocationPath, ctx.Param("protocolID"), &protocolID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocolID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OverwriteProtocol(ctx, protocolID)
	return err
}

// ServeSwaggerFile converts echo context to params.
func (w *ServerInterfaceWrapper) ServeSwaggerFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServeSwaggerFile(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// GetSelfUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/protocol", wrapper.UploadProtocol)
	router.GET(baseURL+"/protocol/me", wrapper.GetSelfProtocolList)
	router.DELETE(baseURL+"/protocol/:protocolID", wrapper.DeleteProtocol)
	router.GET(baseURL+"/protocol/:protocolID", wrapper.GetProtocol)
	router.PUT(baseURL+"/protocol/:protocolID", wrapper.OverwriteProtocol)
	router.GET(baseURL+"/swagger.json", wrapper.ServeSwaggerFile)
	router.POST(baseURL+"/user", wrapper.CreateUser)
	router.POST(baseURL+"/user/login", wrapper.LoginUser)
	router.GET(baseURL+"/user/me", wrapper.GetSelfUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
